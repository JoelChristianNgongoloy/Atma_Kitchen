import React, { useState, useEffect } from "react";
import {
  Input,
  Button,
  Typography,
  Select,
  Option,
  Textarea,
  Spinner,
} from "@material-tailwind/react";
import {
  CreateHampersWE,
  GetAllProdukH,
} from "../../../api/AdminApi/apiHampers";

const CreateHampers = () => {
  const [dataHampers, setDataHampers] = useState({
    nama_hampers: "",
    deskripsi_hampers: "",
    harga_hampers: "",
    stok_hampers: "",
    detail_hampers: [{ id_produk: "" }],
  });

  const [products, setProducts] = useState([]);
  const [isPending, setIsPending] = useState(false);

  useEffect(() => {
    GetAllProdukH()
      .then((response) => {
        setProducts(response.data);
      })
      .catch((err) => {
        console.error(err);
      });
  }, []);

  const handleChange = (event) => {
    setDataHampers({ ...dataHampers, [event.target.name]: event.target.value });
  };

  const handleDetailChange = (index, event) => {
    const newDetailHampers = [...dataHampers.detail_hampers];
    newDetailHampers[index][event.target.name] = event.target.value;
    setDataHampers({ ...dataHampers, detail_hampers: newDetailHampers });
  };

  const addDetailHampers = () => {
    setDataHampers((prevState) => ({
      ...prevState,
      detail_hampers: [...prevState.detail_hampers, { id_produk: "" }],
    }));
  };

  const removeDetailHampers = (index) => {
    const newDetailHampers = [...dataHampers.detail_hampers];
    newDetailHampers.splice(index, 1);
    setDataHampers({ ...dataHampers, detail_hampers: newDetailHampers });
  };

  const handleSubmit = async (event) => {
    event.preventDefault();
    setIsPending(true);
    try {
      await CreateHampersWE(dataHampers);
      // Reset form or show success message
    } catch (error) {
      console.error(error);
    } finally {
      setIsPending(false);
    }
  };

  return (
    <div>
      <Typography variant="h2">Create Hampers</Typography>
      <form onSubmit={handleSubmit}>
        <Input
          label="Nama Hampers"
          name="nama_hampers"
          value={dataHampers.nama_hampers}
          onChange={handleChange}
          required
        />
        <Textarea
          label="Deskripsi Hampers"
          name="deskripsi_hampers"
          value={dataHampers.deskripsi_hampers}
          onChange={handleChange}
          required
        />
        <Input
          label="Harga Hampers"
          name="harga_hampers"
          type="number"
          value={dataHampers.harga_hampers}
          onChange={handleChange}
          required
        />
        <Input
          label="Stok Hampers"
          name="stok_hampers"
          type="number"
          value={dataHampers.stok_hampers}
          onChange={handleChange}
          required
        />

        {dataHampers.detail_hampers.map((detail, index) => (
          <div key={index}>
            <Select
              label="Pilih Produk"
              name="id_produk"
              value={detail.id_produk}
              onChange={(e) => handleDetailChange(index, e)}
              required
            >
              {products?.length > 0 ? (
                products.map((product) => (
                  <Option key={product.id} value={product.id}>
                    {product.nama_produk}
                  </Option>
                ))
              ) : (
                <Option disabled>Loading products...</Option>
              )}
            </Select>
            <Button type="button" onClick={() => removeDetailHampers(index)}>
              Remove
            </Button>
          </div>
        ))}

        <Button type="button" onClick={addDetailHampers}>
          Add Product
        </Button>

        <Button type="submit" disabled={isPending}>
          {isPending ? <Spinner size="sm" /> : "Create Hampers"}
        </Button>
      </form>
    </div>
  );
};

export default CreateHampers;
